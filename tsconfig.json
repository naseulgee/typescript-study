{
    "compilerOptions": {//ts -> js 변환 설정
          "rootDir"         : "./src"          //소스파일 내 root 폴더 정의
        , "outDir"          : "./build/js"     //js 변환 파일 위치
        , "target"          : "ES2015"         //js 변환 버전. 기본: ES3. ES6 == ES2015
        , "noEmitOnError"   : true             //ts 파일에 에러가 있는 경우 변환하지 않음 여부
        , "lib"             : ["ESNext", "DOM"]//변환 시 사용하는 라이브러리 지정. target에 따라 기본값이 다르다
        , "module"          : "ESNext"         //변환을 마친 후 js가 사용하는 모듈 시스템. ESNext: ES6 이후 모든 버전
        , "esModuleInterop" : true             //ESM(ES Module), CommonJS 호환 사용 여부
        , "moduleResolution": "Node"           //ts 컴파일러가 모듈을 찾는 방법
        , "baseUrl"         : "./"             //import 기준 경로 지정. 모듈을 찾을 때 해석하는 첫번째 과정(경로) 추가
        , "paths"           : {                //import 명칭 지정
            "@src/*": [
                "src/"//baseUrl를 기준으로 상대 경로를 적는다
            ]
        }
        , "strict"          : true             //타입을 엄격하게 검사 여부
            //strict 값은 아래의 옵션은 기본값이 된다
            //아래 옵션을 사용하여 커스텀 가능하다
            , "noImplicitAny"               : true //명시적이지 않은 any 유형 사용 시 오류 발생
            , "strictNullChecks"            : true //Null, Undefined 할당 시 엄격 검사 여부
            , "strictFunctionTypes"         : true //엄격한 함수 유형 검사 여부
            , "strictBindCallApply"         : true //엄격한 bind, call, apply 함수 메서드 사용
            , "strictPropertyInitialization": true //클래스의 속성 초기화 엄격 검사 여부
            , "noImplicitThis"              : true //명시적이지 않은 any 유형으로 this 표현식 사용 시 오류 발생
            , "alwaysStrict"                : true //엄격모드에서 구문 분석 후 각 소스 파일에 use strict 코드 출력 여부
        , "removeComments"  : true             //js 변환 시 ts의 모든 주석 제거 여부
        , "isolatedModules" : false            //모든 소스코드 파일을 모듈로 만들기 강제 여부 -> import, export 필수
        , "allowJs"         : true             //js와 ts 동시 사용 여부
        , "checkJs"         : true             //ts 컴파일러가 js의 에러도 검사 여부. allowJs가 true여야 함. 모든 js 파일 위 @ts-check를 포함하는 것과 동일
        , "declaration"     : false            //ts 파일을 변환 시 js와 d.ts 선언 파일 생성 여부. 선언 파일은 타입들만 따로 관리할 수 있다
        , "forceConsistentCasingInFileNames": true//파일 이름 대소문자 판별 옵션
    }
    //, "files": []   //컴파일할 개별 파일 경로 목록(확장자명 필수)
    , "include": [  //컴파일할 폴더 경로 목록
        "./src/**/*.ts"//src 하위 경로 모든 ts 파일
    ]
    ,"exclude": [   //컴파일 제외 폴더 경로 목록
        "node_modules",
        "dist"
    ]
    //, "extends": "main_config.json" //상속해서 사용할 다른 tsconfig 파일 지정
}